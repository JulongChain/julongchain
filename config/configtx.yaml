# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
# Modified some contents by Dingxuan on 2018-03-01
#

################################################################################
#
#   CONSENTER
#
#   This section defines the values to encode into a config transaction or
#   genesis block for consenter related parameters.
#
################################################################################
consenter: &consenterDefaults

    # Consenter Type: The consenter implementation to start.
    # Available types are "solo" and "kafka".
    consenterType: Singleton

    addresses:
        - 127.0.0.1:7050

    # Batch Timeout: The amount of time to wait before creating a batch.
    batchTimeout: 2000

    # Batch Size: Controls the number of messages batched into a block.
    batchSize:

        # Max Message Count: The maximum number of messages to permit in a
        # batch.
        maxMessageCount: 10

        # Absolute Max Bytes: The absolute maximum number of bytes allowed for
        # the serialized messages in a batch. If the "kafka" ConsenterType is
        # selected, set 'message.max.bytes' and 'replica.fetch.max.bytes' on
        # the Kafka brokers to a value that is larger than this one.
        # 10M
        absoluteMaxBytes: 10485760

        # Preferred Max Bytes: The preferred maximum number of bytes allowed
        # for the serialized messages in a batch. A message larger than the
        # preferred max bytes will result in a batch larger than preferred max
        # bytes.
        # 512K
        preferredMaxBytes: 524288

    # Max Groups is the maximum number of groups to allow on the ordering
    # network. When set to 0, this implies no maximum number of groups.
    maxGroups: 0

    kafka:
        # Brokers: A list of Kafka brokers to which the consenter connects. Edit
        # this list to identify the brokers of the ordering service.
        # NOTE: Use IP:port notation.
        brokers:
            - kafka0:9092
            - kafka1:9092
            - kafka2:9092

    # Organizations lists the orgs participating on the consenter side of the
    # network.
    organizations:

################################################################################
#
#   ORGANIZATIONS
#
#   This section defines the organizational identities that can be referenced
#   in the configuration profiles.
#
################################################################################
organizations:

    # SampleOrg defines an MSP using the sampleconfig. It should never be used
    # in production but may be used as a template for other definitions.
    - &SampleOrg
        # Name is the key by which this org will be referenced in group
        # configuration transactions.
        # Name can include alphanumeric characters as well as dots and dashes.
        name: SampleOrg

        # ID is the key by which this org's MSP definition will be referenced.
        # ID can include alphanumeric characters as well as dots and dashes.
        id: DEFAULT

        # MSPDir is the filesystem path which contains the MSP configuration.
        #mspDir: D:\msp
        mspDir: msp
        # AdminPrincipal dictates the type of principal used for an
        # organization's Admins policy. Today, only the values of Role.ADMIN and
        # Role.MEMBER are accepted, which indicates a principal of role type
        # ADMIN and role type MEMBER respectively.
        adminPrincipal: Role.ADMIN

        # AnchorNodes defines the location of peers which can be used for
        # cross-org gossip communication. Note, this value is only encoded in
        # the genesis block in the Application section context.
        anchorNodes:
            - host: 127.0.0.1
              port: 7051

################################################################################
#
#   APPLICATION
#
#   This section defines the values to encode into a config transaction or
#   genesis block for application-related parameters.
#
################################################################################
application: &ApplicationDefaults

    # Organizations lists the orgs participating on the application side of the
    # network.
    organizations:

################################################################################
#
#   CAPABILITIES
#
#   This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x nodes and consenters.  Capabilities define features which must be
#   present in a fabric binary for that binary to safely participate in the
#   fabric network.  For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a group
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x node will deliberately crash.
#
################################################################################
capabilities:
    # Group capabilities apply to both the consenters and the nodes and must be
    # supported by both.  Set the value of the capability to true to require it.
    Group: &GroupCapabilities
        # V1.1 for Group is a catchall flag for behavior which has been
        # determined to be desired for all consenters and nodes running v1.0.x,
        # but the modification of which would cause incompatibilities.  Users
        # should leave this flag set to true.
        V1_1: true

    # Consenter capabilities apply only to the consenters, and may be safely
    # manipulated without concern for upgrading nodes.  Set the value of the
    # capability to true to require it.
    Consenter: &ConsenterCapabilities
        # V1.1 for Order is a catchall flag for behavior which has been
        # determined to be desired for all consenters running v1.0.x, but the
        # modification of which  would cause incompatibilities.  Users should
        # leave this flag set to true.
        V1_1: true

    # Application capabilities apply only to the node network, and may be
    # safely manipulated without concern for upgrading consenters.  Set the value
    # of the capability to true to require it.
    Application: &ApplicationCapabilities
        # V1.1 for Application is a catchall flag for behavior which has been
        # determined to be desired for all nodes running v1.0.x, but the
        # modification of which would cause incompatibilities.  Users should
        # leave this flag set to true.
        V1_1: true
        # V1_1_PVTDATA_EXPERIMENTAL is an Application capability to enable the
        # private data capability.  It is only supported when using nodes built
        # with experimental build tag.  When set to true, private data
        # collections can be configured upon chaincode instantiation and
        # utilized within chaincode Invokes.
        # NOTE: Use of this feature with non "experimental" binaries on the
        # network may cause a fork.
        V1_1_PVTDATA_EXPERIMENTAL: false
        # V1_1_RESOURCETREE_EXPERIMENTAL is an Application capability to enable
        # the resources capability. Currently this is needed for defining
        # resource-based access control (RBAC). RBAC helps set fine-grained
        # access control on system resources such as the endorser and various
        # system chaincodes. Default is v1.0-based access control based on
        # GROUP_READERS and GROUP_WRITERS.
        # NOTE: Use of this feature with non "experimental" binaries on
        # the network may cause a fork.
        V1_1_RESOURCETREE_EXPERIMENTAL: false

#---
################################################################################
#
#   PROFILES
#
#   Different configuration profiles may be encoded here to be specified as
#   parameters to the configtxgen tool. The profiles which specify consortiums
#   are to be used for generating the consenter genesis block. With the correct
#   consortium members defined in the consenter genesis block, group creation
#   requests may be generated with only the org member names and a consortium
#   name.
#
################################################################################
profiles:

    # SampleInsecureSolo defines a configuration which uses the Solo consenter,
    # contains no MSP definitions, and allows all transactions and group
    # creation requests for the consortium SampleConsortium.
    SampleInsecureSolo:
        consenter:
            <<: *consenterDefaults
        consortiums:
            SampleConsortium:
                organizations:

    # SampleInsecureKafka defines a configuration that differs from the
    # SampleInsecureSolo one only in that it uses the Kafka-based consenter.
    SampleInsecureKafka:
        consenter:
            <<: *consenterDefaults
            consenterType: kafka
        consortiums:
            SampleConsortium:
                organizations:

    # SampleDevModeSolo defines a configuration which uses the Solo consenter,
    # contains the sample MSP as both consenter and consortium member, and
    # requires only basic membership for admin privileges. It also defines
    # an Application on the ordering system group, which should usually
    # be avoided.
    SampleDevModeSolo:
        consenter:
            <<: *consenterDefaults
            organizations:
                - <<: *SampleOrg
                  adminPrincipal: Role.MEMBER
        application:
            <<: *ApplicationDefaults
            organizations:
                - <<: *SampleOrg
                  adminPrincipal: Role.MEMBER
        consortiums:
            SampleConsortium:
                organizations:
                    - <<: *SampleOrg
                      adminPrincipal: Role.MEMBER

    # SampleDevModeSoloV1.1 mimics the SampleDevModeSolo definition but
    # additionally defines the v1.1 only capabilities which do not allow a
    # mixed v1.0.x v1.1.x network.
    SampleDevModeSoloV1_1:
        capabilities:
            <<: *GroupCapabilities
        consenter:
            <<: *consenterDefaults
            organizations:
                - <<: *SampleOrg
                  adminPrincipal: Role.MEMBER
            capabilities:
                <<: *ConsenterCapabilities
        application:
            <<: *ApplicationDefaults
            organizations:
                - <<: *SampleOrg
                  adminPrincipal: Role.MEMBER
            capabilities:
                <<: *ApplicationCapabilities
        consortiums:
            SampleConsortium:
                organizations:
                    - <<: *SampleOrg
                      adminPrincipal: Role.MEMBER

    # SampleDevModeKafka defines a configuration that differs from the
    # SampleDevModeSolo one only in that it uses the Kafka-based consenter.
    SampleDevModeKafka:
        consenter:
            <<: *consenterDefaults
            consenterType: kafka
            organizations:
                - <<: *SampleOrg
                  adminPrincipal: Role.MEMBER
        application:
            <<: *ApplicationDefaults
            organizations:
                - <<: *SampleOrg
                  adminPrincipal: Role.MEMBER
        consortiums:
            SampleConsortium:
                organizations:
                    - <<: *SampleOrg
                      adminPrincipal: Role.MEMBER

    # SampleDevModeKafkaV1_1 mimics the SampleDevModeKafka definition but
    # additionally defines the v1.1 only capabilities which do not allow a
    # mixed v1.0.x v1.1.x network.
    SampleDevModeKafkaV1_1:
        capabilities:
            <<: *GroupCapabilities
        consenter:
            <<: *consenterDefaults
            consenterType: kafka
            organizations:
                - <<: *SampleOrg
                  adminPrincipal: Role.MEMBER
            capabilities:
                <<: *ConsenterCapabilities
        application:
            <<: *ApplicationDefaults
            organizations:
                - <<: *SampleOrg
                  adminPrincipal: Role.MEMBER
            capabilities:
                <<: *ApplicationCapabilities
        consortiums:
            SampleConsortium:
                organizations:
                    - <<: *SampleOrg
                      adminPrincipal: Role.MEMBER

    # SampleSingleMSPSolo defines a configuration which uses the Solo consenter,
    # and contains a single MSP definition (the MSP sampleconfig).
    # The Consortium SampleConsortium has only a single member, SampleOrg.
    SampleSingleMSPSolo:
        consenter:
            <<: *consenterDefaults
            organizations:
                - *SampleOrg
        consortiums:
            SampleConsortium:
                organizations:
                    - *SampleOrg

    # SampleSingleMSPKafka defines a configuration that differs from the
    # SampleSingleMSPSolo one only in that it uses the Kafka-based consenter.
    SampleSingleMSPKafka:
        consenter:
            <<: *consenterDefaults
            consenterType: kafka
            organizations:
                - *SampleOrg
        consortiums:
            SampleConsortium:
                organizations:
                    - *SampleOrg

    # SampleSingleMSPSoloV1_1 mimics the SampleSingleMSPSolo definition but
    # additionally defines the v1.1 only capabilities which do not allow a
    # mixed v1.0.x v1.1.x network.
    SampleSingleMSPSoloV1_1:
        capabilities:
            <<: *GroupCapabilities
        consenter:
            <<: *consenterDefaults
            organizations:
                - *SampleOrg
            capabilities:
                <<: *ConsenterCapabilities
        consortiums:
            SampleConsortium:
                organizations:
                    - *SampleOrg

    # SampleSingleMSPKafkaV1_1 defines a configuration that differs from the
    # SampleSingleMSPSoloV1_1 one only in that it uses the Kafka-based consenter.
    SampleSingleMSPKafkaV1_1:
        capabilities:
            <<: *GroupCapabilities
        consenter:
            <<: *consenterDefaults
            consenterType: kafka
            organizations:
                - *SampleOrg
            capabilities:
                <<: *ConsenterCapabilities
        consortiums:
            SampleConsortium:
                organizations:
                    - *SampleOrg

    # SampleNoConsortium is very similar to SampleInsecureSolo, except it does
    # not define Consortiums.
    SampleNoConsortium:
        consenter:
            <<: *consenterDefaults

    # SampleEmptyInsecureGroup defines a group with no members and
    # therefore no access control.
    SampleEmptyInsecureGroup:
        consortium: SampleConsortium
        application:
            organizations:

    # SampleSingleMSPGroup defines a group with only the sample org as a
    # member. It is designed to be used in conjunction with SampleSingleMSPSolo
    # and SampleSingleMSPKafka consenter profiles.
    SampleSingleMSPGroup:
        consortium: SampleConsortium
        application:
            organizations:
                - *SampleOrg

    # SampleSingleMSPGroupV1_1 defines a group just as
    # SampleSingleMSPGroup. However, it also defines the capabilities map which
    # makes this group incompatible with v1.0.x nodes.
    SampleSingleMSPGroupV1_1:
        consortium: SampleConsortium
        application:
            organizations:
                - *SampleOrg
            capabilities:
                <<: *ApplicationCapabilities






