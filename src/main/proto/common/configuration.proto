/*
Copyright IBM Corp. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

                 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Modified java_package and other contents by Dingxuan on 2018-03-09
*/

syntax = "proto3";

option go_package = "github.com/hyperledger/fabric/protos/common";
option java_package = "org.bcia.javachain.protos.common";

package common;

// HashingAlgorithm is encoded into the configuration transaction as  a configuration item of type Chain
// with a Key of "HashingAlgorithm" and a Value of  HashingAlgorithm as marshaled protobuf bytes
message HashingAlgorithm {
    // Currently supported algorithms are: SHAKE256
    string name = 1;
}

// BlockDataHashingStructure is encoded into the configuration transaction as a configuration item of
// type Chain with a Key of "BlockDataHashingStructure" and a Value of HashingAlgorithm as marshaled protobuf bytes
message BlockDataHashingStructure {
    // width specifies the width of the Merkle tree to use when computing the BlockDataHash
    // in order to replicate flat hashing, set this width to MAX_UINT32
    uint32 width  = 1;
}

// ConsenterAddresses is encoded into the configuration transaction as a configuration item of type Chain
// with a Key of "ConsenterAddresses" and a Value of ConsenterAddresses as marshaled protobuf bytes
message ConsenterAddresses {
    repeated string addresses = 1;
}

// Consortium represents the consortium context in which the group was created
message Consortium {
    string name = 1;
}


// Capabilities message defines the capabilities a particular binary must implement
// for that binary to be able to safely participate in the group.  The capabilities
// message is defined at the /Group level, the /Group/Application level, and the
// /Group/Consenter level.
//
// The /Group level capabilties define capabilities which both the consenter and node
// binaries must satisfy.  These capabilties might be things like a new MSP type,
// or a new policy type.
//
// The /Group/Consenter level capabilties define capabilities which must be supported
// by the consenter, but which have no bearing on the behavior of the node.  For instance
// if the consenter changes the logic for how it constructs new groups, only all consenters
// must agree on the new logic.  The nodes do not need to be aware of this change as
// they only interact with the group after it has been constructed.
//
// Finally, the /Group/Application level capabilities define capabilities which the node
// binary must satisfy, but which have no bearing on the consenter.  For instance, if the
// node adds a new UTXO transaction type, or changes the chaincode lifecycle requirements,
// all nodes must agree on the new logic.  However, consenters never inspect transactions
// this deeply, and therefore have no need to be aware of the change.
//
// The capabilities strings defined in these messages typically correspond to release
// binary versions (e.g. "V1.1"), and are used primarilly as a mechanism for a fully
// upgraded network to switch from one set of logic to a new one.
//
// Although for V1.1, the consenters must be upgraded to V1.1 prior to the rest of the
// network, going forward, because of the split between the /Group, /Group/Consenter
// and /Group/Application capabilities.  It should be possible for the consenter and
// application networks to upgrade themselves independently (with the exception of any
// new capabilities defined at the /Group level).
message Capabilities {
	map<string, Capability> capabilities = 1;
}

// Capability is an empty message for the time being.  It is defined as a protobuf
// message rather than a constant, so that we may extend capabilities with other fields
// if the need arises in the future.  For the time being, a capability being in the
// capabilities map requires that that capability be supported.
message Capability { }